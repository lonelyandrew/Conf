" Vundle {{{

    set nocompatible              " be iMproved, required
    filetype off                  " required

    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()

    " let Vundle manage Vundle, required
    Plugin 'VundleVim/Vundle.vim'

    Plugin 'airblade/vim-gitgutter'
    Plugin 'majutsushi/tagbar'
    Plugin 'wincent/command-t'
    Plugin 'scrooloose/nerdtree'
    Plugin 'tpope/vim-commentary'
    Plugin 'nvie/vim-flake8'
    Plugin 'davidhalter/jedi-vim'

    call vundle#end()            " required
    filetype plugin indent on    " required

    " To ignore plugin indent changes, instead use:
    "filetype plugin on
    "
    " Brief help
    " :PluginList       - lists configured plugins
    " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
    " :PluginSearch foo - searches for foo; append `!` to refresh local cache
    " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
    "
    " see :h vundle for more details or wiki for FAQ
    " Put your non-Plugin stuff after this line

" }}}

" Display {{{

    set encoding=utf-8

    if !exists("g:syntax_on")
        syntax enable
    endif

    set nu " Show line numbers

    " Indent settings
    set tabstop=4 "Count four spaces for a tab
    set shiftwidth=4 " Cols when use << and >> to indent
    set expandtab " Replace tabs with spaces
    set autoindent
    set cindent
    "Control how many columns vim uses when you hit Tab in insert mode
    set softtabstop=4
    set backspace=indent,eol,start


    set cursorline " Highlight current line
    set cursorcolumn " Highlight current col
    set colorcolumn=80 "Set ruler

    " Some color settings
    hi CursorLine cterm=NONE ctermbg=black
    hi CursorColumn cterm=NONE ctermbg=black
    hi Folded cterm=NONE ctermbg=green ctermfg=black
    hi FoldColumn cterm=NONE ctermbg=green ctermfg=black
    hi CursorLineNR cterm=bold ctermbg=yellow ctermfg=black
    hi ColorColumn ctermbg=black
    set list lcs=tab:▸•,trail:• " Set listchars

    " No beeping
    set vb t_vb=

" }}}

" Mappings {{{

    let mapleader = "-" " Set the global leader
    inoremap jk <Esc>
    nnoremap H ^
    nnoremap L $

    " Open the vimrc file, and source it.
    nnoremap <leader>ev :vsplit $MYVIMRC<cr>
    nnoremap <leader>sv :source $MYVIMRC<cr>

    " Toggle relative line numbers.
    nnoremap <leader>N :set rnu!<cr>

    " Add command alias.
    command! W w
    command! Q q

    " Use space to toggle foldings.
    nnoremap <space> zA

    " Use ctrl-[hjkl] the active split.
    nnoremap <silent> <c-k> :wincmd k<cr>
    nnoremap <silent> <c-j> :wincmd j<cr>
    nnoremap <silent> <c-h> :wincmd h<cr>
    nnoremap <silent> <c-l> :wincmd l<cr>

    " Toggle the nerd tree.
    nnoremap <F9> :NERDTreeToggle<cr>

    " Transverse Buffers
    nnoremap <silent> [b :bp<cr>
    nnoremap <silent> ]b :bn<cr>
    nnoremap <silent> [B :bf<cr>
    nnoremap <silent> ]B :bl<cr>

    " Map %% to %:h in command line mode auto-completion.
    cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" }}}

" Status line {{{

    set laststatus=2      " Display the status line always
    set statusline=%=     " Switch to the right side
    set statusline+=[%{strftime('%Y\ %a\ %b\ %d\ %H:%M:%S')}] " Date time
    set statusline+=- " Separator
    set statusline+=[%F]  " Path to the file
    set statusline+=- " Separator
    set statusline+=%y    " File type of the file
    set statusline+=- " Separator
    set statusline+=[%3l   " Current line
    set statusline+=/ " Separator
    set statusline+=%-3L    " Total lines
    set statusline+=,%2c]\   " Current column number

    " Timer callback function to update status line
    " func! UpdateStatusLine(timer)
    "     redraws " update the status line of the current window
    " endfunc

    " Update status line per sec
    " let statuslineTimer = timer_start(1000, 'UpdateStatusLine', {'repeat':-1})

" }}}

" Vim file settings {{{

    augroup filetype_vim
      autocmd!
      autocmd FileType vim setlocal foldmethod=marker " set vimrc fold method
      autocmd FileType vim setlocal fdc=1 " set vimrc fold column
    augroup END

" }}}

" Search {{{

    set hlsearch " Highlight the search results
    set incsearch " Incremental search

"}}}

" Ctags {{{

    let g:tagbar_type_markdown = {
        \ 'ctagstype' : 'markdown',
        \ 'kinds' : [
            \ 'h:Heading_L1',
            \ 'i:Heading_L2',
            \ 'k:Heading_L3'
        \ ]
        \ }

" }}}

" Tagbar {{{

    " Toggle the outline window.
    nmap <F8> :TagbarToggle<cr>
    " Display tag bar on the left side.
    let g:tagbar_left = 1

" }}}

" Jedi {{{
    let g:jedi#show_call_signatures = "0"
" }}}
